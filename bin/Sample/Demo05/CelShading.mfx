Pass
{
	State
	{
		CullMode INHERIT
		DepthCheck LESS_EQUAL
		BlendMode OPACITY
	}
	
	Uniform
	{
		u_ViewProj VIEW_PROJ_MATRIX
		u_BoneTM BONE_MATRIX
		u_CameraPos CAMERA_POSITION
		u_LightDir LIGHT_DIRECTION
		u_Diffuse DIFFUSE
		u_Specular SPECULAR
	}
	
	Attribute
	{
		i_Position POSITION
		i_Normal NORMAL
		i_Texcoord TEXCOORD0
		i_BoneIndex BONE_INDEX
		i_BoneWeight BONE_WEIGHT
	}
	
	Sampler
	{
		Name u_baseMap
		BindType DIFFUSE
	}
	
	Sampler
	{
		Name u_celDiffuseMap
		BindType SAMPLER
		Address CLAMP
		Filename Demo05/cel_shading_diffuse.png
	}
	
	Sampler
	{
		Name u_celSpecularMap
		BindType SAMPLER
		Address CLAMP
		Filename Demo05/cel_shading_specular.png
	}
	
	Sampler
	{
		Name u_celEdgeMap
		BindType SAMPLER
		Address CLAMP
		Filename Demo05/cel_shading_edge.png
	}
	
	VertexShader {
		uniform mat4 u_ViewProj;
		uniform vec4 u_BoneTM[35 * 3];

		uniform vec4 u_CameraPos;

		uniform vec4 u_LightDir;

		attribute vec4 i_Position;
		attribute vec4 i_Normal;
		attribute vec4 i_Texcoord;
		attribute vec4 i_BoneIndex;
		attribute vec4 i_BoneWeight;

		varying vec2 o_uv;
		varying float o_diffuse;
		varying float o_specular;
		varying float o_edge;

		void doHwSkin(out vec4 position, out vec3 normal)
		{
			int i0 = int(i_BoneIndex.x) * 3;
			int i1 = int(i_BoneIndex.y) * 3;
			int i2 = int(i_BoneIndex.z) * 3;
			int i3 = int(i_BoneIndex.w) * 3;

			vec4 w = i_BoneWeight;
	
			vec4 m[3];
			m[0] = u_BoneTM[i0 + 0] * w.x + u_BoneTM[i1 + 0] * w.y + u_BoneTM[i2 + 0] * w.z + u_BoneTM[i3 + 0] * w.w;
			m[1] = u_BoneTM[i0 + 1] * w.x + u_BoneTM[i1 + 1] * w.y + u_BoneTM[i2 + 1] * w.z + u_BoneTM[i3 + 1] * w.w;
			m[2] = u_BoneTM[i0 + 2] * w.x + u_BoneTM[i1 + 2] * w.y + u_BoneTM[i2 + 2] * w.z + u_BoneTM[i3 + 2] * w.w;

			vec4 p;
			p.x = dot(i_Position, m[0]);
			p.y = dot(i_Position, m[1]);
			p.z = dot(i_Position, m[2]);
			p.w = 1.0;

			vec3 n;
			n.x = dot(i_Normal.xyz, m[0].xyz);
			n.y = dot(i_Normal.xyz, m[1].xyz);
			n.z = dot(i_Normal.xyz, m[2].xyz);
			n = normalize(n);

			position = p;
			normal = n;
		}

		void main()
		{
			//
			vec4 worldPos;
			vec3 worldNormal;

			doHwSkin(worldPos, worldNormal);

			gl_Position = u_ViewProj * worldPos;

			// 
			o_uv = i_Texcoord.xy;

			//
			vec3 N = worldNormal;
			vec3 L = u_LightDir.xyz;
			vec3 V = normalize(u_CameraPos.xyz - worldPos.xyz);
			vec3 H = normalize(L + V);

			float NdL = max(0.0, dot(N, L));
			float NdH = 0.0;
			if (NdL > 0.0)
			{
				NdH = pow(max(0.0, dot(N, H)), 40.0);
			}

			o_diffuse = NdL;
			o_specular = NdH;
			o_edge = max(dot(N, V), 0.0);
		}
	}
	
	PixelShader {
		precision highp float;
		precision mediump int;

		varying vec2 o_uv;
		varying float o_diffuse;
		varying float o_specular;
		varying float o_edge;
		
		uniform vec4 u_Diffuse;
		uniform vec4 u_Specular;

		uniform sampler2D u_baseMap;
		uniform sampler2D u_celDiffuseMap;
		uniform sampler2D u_celSpecularMap;
		uniform sampler2D u_celEdgeMap;

		void main()
		{
			vec4 baseColor = texture2D(u_baseMap, o_uv);

			// Alpha Test
			if (baseColor.a < 0.5)
				discard;

			vec3 diffuse = texture2D(u_celDiffuseMap, vec2(o_diffuse, 0.0)).r * u_Diffuse.rgb;
			vec3 specular = texture2D(u_celSpecularMap, vec2(o_specular, 0.0)).r * u_Specular.rgb;
			float edge = texture2D(u_celEdgeMap, vec2(o_edge, 0.0)).r;

			vec3 color = edge * (diffuse + specular) * vec3(1.0, 0.0, 0.0);

			gl_FragColor = vec4(color, 1.0);
		}
	}
}

